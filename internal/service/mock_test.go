// Code generated by MockGen. DO NOT EDIT.
// Source: ./contracts.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/lukinairina90/banking_backend/internal/domain"
)

// MockRolesRepository is a mock of RolesRepository interface.
type MockRolesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRolesRepositoryMockRecorder
}

// MockRolesRepositoryMockRecorder is the mock recorder for MockRolesRepository.
type MockRolesRepositoryMockRecorder struct {
	mock *MockRolesRepository
}

// NewMockRolesRepository creates a new mock instance.
func NewMockRolesRepository(ctrl *gomock.Controller) *MockRolesRepository {
	mock := &MockRolesRepository{ctrl: ctrl}
	mock.recorder = &MockRolesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolesRepository) EXPECT() *MockRolesRepositoryMockRecorder {
	return m.recorder
}

// GetByName mocks base method.
func (m *MockRolesRepository) GetByName(ctx context.Context, name string) (domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockRolesRepositoryMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockRolesRepository)(nil).GetByName), ctx, name)
}

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessionRepository) Create(ctx context.Context, token domain.RefreshSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSessionRepositoryMockRecorder) Create(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionRepository)(nil).Create), ctx, token)
}

// Get mocks base method.
func (m *MockSessionRepository) Get(ctx context.Context, token string) (domain.RefreshSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(domain.RefreshSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionRepositoryMockRecorder) Get(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionRepository)(nil).Get), ctx, token)
}

// MockRandomGenerator is a mock of RandomGenerator interface.
type MockRandomGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRandomGeneratorMockRecorder
}

// MockRandomGeneratorMockRecorder is the mock recorder for MockRandomGenerator.
type MockRandomGeneratorMockRecorder struct {
	mock *MockRandomGenerator
}

// NewMockRandomGenerator creates a new mock instance.
func NewMockRandomGenerator(ctrl *gomock.Controller) *MockRandomGenerator {
	mock := &MockRandomGenerator{ctrl: ctrl}
	mock.recorder = &MockRandomGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomGenerator) EXPECT() *MockRandomGeneratorMockRecorder {
	return m.recorder
}

// GenerateRandomCardNumber mocks base method.
func (m *MockRandomGenerator) GenerateRandomCardNumber() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomCardNumber")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRandomCardNumber indicates an expected call of GenerateRandomCardNumber.
func (mr *MockRandomGeneratorMockRecorder) GenerateRandomCardNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomCardNumber", reflect.TypeOf((*MockRandomGenerator)(nil).GenerateRandomCardNumber))
}

// GenerateRandomCvv mocks base method.
func (m *MockRandomGenerator) GenerateRandomCvv() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomCvv")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRandomCvv indicates an expected call of GenerateRandomCvv.
func (mr *MockRandomGeneratorMockRecorder) GenerateRandomCvv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomCvv", reflect.TypeOf((*MockRandomGenerator)(nil).GenerateRandomCvv))
}

// GenerateRandomIban mocks base method.
func (m *MockRandomGenerator) GenerateRandomIban() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomIban")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRandomIban indicates an expected call of GenerateRandomIban.
func (mr *MockRandomGeneratorMockRecorder) GenerateRandomIban() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomIban", reflect.TypeOf((*MockRandomGenerator)(nil).GenerateRandomIban))
}

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// BlockAccount mocks base method.
func (m *MockAccountRepository) BlockAccount(ctx context.Context, accountID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockAccount", ctx, accountID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockAccount indicates an expected call of BlockAccount.
func (mr *MockAccountRepositoryMockRecorder) BlockAccount(ctx, accountID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockAccount", reflect.TypeOf((*MockAccountRepository)(nil).BlockAccount), ctx, accountID, userID)
}

// Create mocks base method.
func (m *MockAccountRepository) Create(ctx context.Context, userID, currencyID int, iban string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, currencyID, iban)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountRepositoryMockRecorder) Create(ctx, userID, currencyID, iban interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountRepository)(nil).Create), ctx, userID, currencyID, iban)
}

// DeleteAccount mocks base method.
func (m *MockAccountRepository) DeleteAccount(ctx context.Context, accountID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountRepositoryMockRecorder) DeleteAccount(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountRepository)(nil).DeleteAccount), ctx, accountID)
}

// DepositAccount mocks base method.
func (m *MockAccountRepository) DepositAccount(ctx context.Context, accountID int, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositAccount", ctx, accountID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DepositAccount indicates an expected call of DepositAccount.
func (mr *MockAccountRepositoryMockRecorder) DepositAccount(ctx, accountID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositAccount", reflect.TypeOf((*MockAccountRepository)(nil).DepositAccount), ctx, accountID, amount)
}

// ExistsAccount mocks base method.
func (m *MockAccountRepository) ExistsAccount(ctx context.Context, accountID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsAccount", ctx, accountID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsAccount indicates an expected call of ExistsAccount.
func (mr *MockAccountRepositoryMockRecorder) ExistsAccount(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsAccount", reflect.TypeOf((*MockAccountRepository)(nil).ExistsAccount), ctx, accountID)
}

// GetAccount mocks base method.
func (m *MockAccountRepository) GetAccount(ctx context.Context, accountID, userID int) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, accountID, userID)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountRepositoryMockRecorder) GetAccount(ctx, accountID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountRepository)(nil).GetAccount), ctx, accountID, userID)
}

// GetAccountAmount mocks base method.
func (m *MockAccountRepository) GetAccountAmount(ctx context.Context, accountID, userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountAmount", ctx, accountID, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAmount indicates an expected call of GetAccountAmount.
func (mr *MockAccountRepositoryMockRecorder) GetAccountAmount(ctx, accountID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAmount", reflect.TypeOf((*MockAccountRepository)(nil).GetAccountAmount), ctx, accountID, userID)
}

// GetAccountCurrencyIDByID mocks base method.
func (m *MockAccountRepository) GetAccountCurrencyIDByID(ctx context.Context, accountID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountCurrencyIDByID", ctx, accountID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountCurrencyIDByID indicates an expected call of GetAccountCurrencyIDByID.
func (mr *MockAccountRepositoryMockRecorder) GetAccountCurrencyIDByID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountCurrencyIDByID", reflect.TypeOf((*MockAccountRepository)(nil).GetAccountCurrencyIDByID), ctx, accountID)
}

// GetAccountCurrencyIDByIban mocks base method.
func (m *MockAccountRepository) GetAccountCurrencyIDByIban(ctx context.Context, iban string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountCurrencyIDByIban", ctx, iban)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountCurrencyIDByIban indicates an expected call of GetAccountCurrencyIDByIban.
func (mr *MockAccountRepositoryMockRecorder) GetAccountCurrencyIDByIban(ctx, iban interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountCurrencyIDByIban", reflect.TypeOf((*MockAccountRepository)(nil).GetAccountCurrencyIDByIban), ctx, iban)
}

// GetAccountIDByIban mocks base method.
func (m *MockAccountRepository) GetAccountIDByIban(ctx context.Context, iban string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountIDByIban", ctx, iban)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIDByIban indicates an expected call of GetAccountIDByIban.
func (mr *MockAccountRepositoryMockRecorder) GetAccountIDByIban(ctx, iban interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIDByIban", reflect.TypeOf((*MockAccountRepository)(nil).GetAccountIDByIban), ctx, iban)
}

// GetAccountsList mocks base method.
func (m *MockAccountRepository) GetAccountsList(ctx context.Context, userID int, paginator domain.Paginator, ordering domain.Orderings) ([]domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsList", ctx, userID, paginator, ordering)
	ret0, _ := ret[0].([]domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsList indicates an expected call of GetAccountsList.
func (mr *MockAccountRepositoryMockRecorder) GetAccountsList(ctx, userID, paginator, ordering interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsList", reflect.TypeOf((*MockAccountRepository)(nil).GetAccountsList), ctx, userID, paginator, ordering)
}

// GetUserIDByAccountID mocks base method.
func (m *MockAccountRepository) GetUserIDByAccountID(ctx context.Context, accountID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByAccountID", ctx, accountID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByAccountID indicates an expected call of GetUserIDByAccountID.
func (mr *MockAccountRepositoryMockRecorder) GetUserIDByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByAccountID", reflect.TypeOf((*MockAccountRepository)(nil).GetUserIDByAccountID), ctx, accountID)
}

// TransferAccount mocks base method.
func (m *MockAccountRepository) TransferAccount(ctx context.Context, fromAccountID, userID int, amount float64, toAccountIban string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferAccount", ctx, fromAccountID, userID, amount, toAccountIban)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferAccount indicates an expected call of TransferAccount.
func (mr *MockAccountRepositoryMockRecorder) TransferAccount(ctx, fromAccountID, userID, amount, toAccountIban interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferAccount", reflect.TypeOf((*MockAccountRepository)(nil).TransferAccount), ctx, fromAccountID, userID, amount, toAccountIban)
}

// UnblockAccount mocks base method.
func (m *MockAccountRepository) UnblockAccount(ctx context.Context, accountID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockAccount", ctx, accountID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockAccount indicates an expected call of UnblockAccount.
func (mr *MockAccountRepositoryMockRecorder) UnblockAccount(ctx, accountID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockAccount", reflect.TypeOf((*MockAccountRepository)(nil).UnblockAccount), ctx, accountID, userID)
}

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionRepository) CreateTransaction(ctx context.Context, fromAccountID, toAccountID int, amount float64) (domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, fromAccountID, toAccountID, amount)
	ret0, _ := ret[0].(domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionRepositoryMockRecorder) CreateTransaction(ctx, fromAccountID, toAccountID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).CreateTransaction), ctx, fromAccountID, toAccountID, amount)
}

// GetTransactionList mocks base method.
func (m *MockTransactionRepository) GetTransactionList(ctx context.Context, accountID int, ordering domain.Orderings, paginator domain.Paginator) ([]domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionList", ctx, accountID, ordering, paginator)
	ret0, _ := ret[0].([]domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionList indicates an expected call of GetTransactionList.
func (mr *MockTransactionRepositoryMockRecorder) GetTransactionList(ctx, accountID, ordering, paginator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionList", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransactionList), ctx, accountID, ordering, paginator)
}

// SetTransactionStatusToSent mocks base method.
func (m *MockTransactionRepository) SetTransactionStatusToSent(ctx context.Context, transactionID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTransactionStatusToSent", ctx, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTransactionStatusToSent indicates an expected call of SetTransactionStatusToSent.
func (mr *MockTransactionRepositoryMockRecorder) SetTransactionStatusToSent(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransactionStatusToSent", reflect.TypeOf((*MockTransactionRepository)(nil).SetTransactionStatusToSent), ctx, transactionID)
}

// MockCardRepository is a mock of CardRepository interface.
type MockCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepositoryMockRecorder
}

// MockCardRepositoryMockRecorder is the mock recorder for MockCardRepository.
type MockCardRepositoryMockRecorder struct {
	mock *MockCardRepository
}

// NewMockCardRepository creates a new mock instance.
func NewMockCardRepository(ctrl *gomock.Controller) *MockCardRepository {
	mock := &MockCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRepository) EXPECT() *MockCardRepositoryMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardRepository) CreateCard(ctx context.Context, accountID int, cardNumber, cardholderName, cvvCode string) (domain.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", ctx, accountID, cardNumber, cardholderName, cvvCode)
	ret0, _ := ret[0].(domain.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardRepositoryMockRecorder) CreateCard(ctx, accountID, cardNumber, cardholderName, cvvCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardRepository)(nil).CreateCard), ctx, accountID, cardNumber, cardholderName, cvvCode)
}

// GetCard mocks base method.
func (m *MockCardRepository) GetCard(ctx context.Context, id, accountID int) (domain.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", ctx, id, accountID)
	ret0, _ := ret[0].(domain.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockCardRepositoryMockRecorder) GetCard(ctx, id, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockCardRepository)(nil).GetCard), ctx, id, accountID)
}

// GetCardListByAccount mocks base method.
func (m *MockCardRepository) GetCardListByAccount(ctx context.Context, userID, accountID int) ([]domain.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardListByAccount", ctx, userID, accountID)
	ret0, _ := ret[0].([]domain.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardListByAccount indicates an expected call of GetCardListByAccount.
func (mr *MockCardRepositoryMockRecorder) GetCardListByAccount(ctx, userID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardListByAccount", reflect.TypeOf((*MockCardRepository)(nil).GetCardListByAccount), ctx, userID, accountID)
}

// GetCardListUser mocks base method.
func (m *MockCardRepository) GetCardListUser(ctx context.Context, userID int) ([]domain.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardListUser", ctx, userID)
	ret0, _ := ret[0].([]domain.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardListUser indicates an expected call of GetCardListUser.
func (mr *MockCardRepositoryMockRecorder) GetCardListUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardListUser", reflect.TypeOf((*MockCardRepository)(nil).GetCardListUser), ctx, userID)
}

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventRepository) CreateEvent(ctx context.Context, event domain.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventRepositoryMockRecorder) CreateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventRepository)(nil).CreateEvent), ctx, event)
}

// GetEventsList mocks base method.
func (m *MockEventRepository) GetEventsList(ctx context.Context, userID int) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsList", ctx, userID)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsList indicates an expected call of GetEventsList.
func (mr *MockEventRepositoryMockRecorder) GetEventsList(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsList", reflect.TypeOf((*MockEventRepository)(nil).GetEventsList), ctx, userID)
}

// MockPasswordHasher is a mock of PasswordHasher interface.
type MockPasswordHasher struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordHasherMockRecorder
}

// MockPasswordHasherMockRecorder is the mock recorder for MockPasswordHasher.
type MockPasswordHasherMockRecorder struct {
	mock *MockPasswordHasher
}

// NewMockPasswordHasher creates a new mock instance.
func NewMockPasswordHasher(ctrl *gomock.Controller) *MockPasswordHasher {
	mock := &MockPasswordHasher{ctrl: ctrl}
	mock.recorder = &MockPasswordHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordHasher) EXPECT() *MockPasswordHasherMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockPasswordHasher) Hash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockPasswordHasherMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockPasswordHasher)(nil).Hash), password)
}

// MockUsersRepository is a mock of UsersRepository interface.
type MockUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryMockRecorder
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
	mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
	mock := &MockUsersRepository{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
	return m.recorder
}

// BlockUser mocks base method.
func (m *MockUsersRepository) BlockUser(ctx context.Context, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockUsersRepositoryMockRecorder) BlockUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockUsersRepository)(nil).BlockUser), ctx, userID)
}

// CheckBlockUser mocks base method.
func (m *MockUsersRepository) CheckBlockUser(ctx context.Context, userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBlockUser", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBlockUser indicates an expected call of CheckBlockUser.
func (mr *MockUsersRepositoryMockRecorder) CheckBlockUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBlockUser", reflect.TypeOf((*MockUsersRepository)(nil).CheckBlockUser), ctx, userID)
}

// Create mocks base method.
func (m *MockUsersRepository) Create(ctx context.Context, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsersRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersRepository)(nil).Create), ctx, user)
}

// Exists mocks base method.
func (m *MockUsersRepository) Exists(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockUsersRepositoryMockRecorder) Exists(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUsersRepository)(nil).Exists), ctx, email)
}

// GetByCredentials mocks base method.
func (m *MockUsersRepository) GetByCredentials(ctx context.Context, email, password string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCredentials", ctx, email, password)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCredentials indicates an expected call of GetByCredentials.
func (mr *MockUsersRepositoryMockRecorder) GetByCredentials(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCredentials", reflect.TypeOf((*MockUsersRepository)(nil).GetByCredentials), ctx, email, password)
}

// GetByID mocks base method.
func (m *MockUsersRepository) GetByID(ctx context.Context, id int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsersRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsersRepository)(nil).GetByID), ctx, id)
}

// GetUserNameAndSurnameByID mocks base method.
func (m *MockUsersRepository) GetUserNameAndSurnameByID(ctx context.Context, userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNameAndSurnameByID", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNameAndSurnameByID indicates an expected call of GetUserNameAndSurnameByID.
func (mr *MockUsersRepositoryMockRecorder) GetUserNameAndSurnameByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNameAndSurnameByID", reflect.TypeOf((*MockUsersRepository)(nil).GetUserNameAndSurnameByID), ctx, userID)
}

// UnblockUser mocks base method.
func (m *MockUsersRepository) UnblockUser(ctx context.Context, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockUsersRepositoryMockRecorder) UnblockUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockUsersRepository)(nil).UnblockUser), ctx, userID)
}
